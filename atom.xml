<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://zhongxingdou.github.io/blog/</id>
    <title>xingdou&apos;s blog</title>
    <updated>2020-05-26T07:47:37.909Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://zhongxingdou.github.io/blog/"/>
    <link rel="self" href="http://zhongxingdou.github.io/blog/atom.xml"/>
    <subtitle>一个程序员的博客</subtitle>
    <logo>http://zhongxingdou.github.io/blog/images/avatar.png</logo>
    <icon>http://zhongxingdou.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2020, xingdou&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[GraphQL 学习笔记]]></title>
        <id>http://zhongxingdou.github.io/blog/post/graphql-xue-xi-bi-ji/</id>
        <link href="http://zhongxingdou.github.io/blog/post/graphql-xue-xi-bi-ji/">
        </link>
        <updated>2020-05-21T07:18:08.000Z</updated>
        <content type="html"><![CDATA[<p><code>GraphQL 是基于图理论的一种用于查询与修改数据的协议</code></p>
<h2 id="基本类型与表达式">基本类型与表达式</h2>
<ul>
<li><strong>String</strong> &quot;hello&quot;</li>
<li><strong>Float</strong> 8888.88</li>
<li><strong>Boolean</strong> true false</li>
<li><strong>ID</strong></li>
<li><strong>enum</strong> Animal { Monkey, Mouse }</li>
<li>参数 <strong>$var</strong></li>
<li>数组 <strong>[item]</strong></li>
<li>不可空类型 <strong>Photo!</strong> ，值不能为 <strong>null</strong></li>
<li>不可空数组 <strong>[item]!</strong>，数组至少有1项才合法</li>
<li><strong>[item!]!</strong>，数组至少有1项，数组成员不能为 <strong>null</strong></li>
<li>标量 <strong>scalar</strong> DateTime，用于扩展基本类型</li>
<li><strong>union</strong> SchoolPeople = Teacher <strong>|</strong> Student，表示类型的值可以是提供的类型其中之一</li>
<li><strong>...on</strong> Teacher { course }，引用类型的部分成员</li>
</ul>
<h2 id="类型">类型</h2>
<h3 id="定义类型">定义类型</h3>
<pre><code class="language-GraphQL">type User {
    name: String!
    gender: Boolean!
    interest: String
}
</code></pre>
<h3 id="类型间引用">类型间引用</h3>
<pre><code class="language-GraphQL">type User{
​	favorites: [Favorite!]
​	friends: [Friendship!]!
}

type Favorite {
​	name: String!
}

type FriendShip {
​	friend_a: User!
​	friend_b: User!
}
</code></pre>
<h3 id="定义接口">定义接口</h3>
<p>与 type 定义的类型类似，但是可被继承（实现）</p>
<pre><code class="language-GraphQL">interface People {
​	name: String!
}

type Worker implements People {
​	name: String!
​	position: String!
}
</code></pre>
<h3 id="输入类型">输入类型</h3>
<p>与 type 定义的类型类似，但是专用于<strong>参数</strong></p>
<pre><code class="language-GraphQL">input Message {
​	title: String
​	content: String!
}
</code></pre>
<h2 id="标量">标量</h2>
<h3 id="声明标量">声明标量</h3>
<p>scalar DateTime</p>
<h3 id="实现标量">实现标量</h3>
<pre><code class="language-js">new GraphQLScalarType {
    name: 'DateTime',
    description: 'A valid date time value.'

    parseValue: value =&gt; new Date(value),                  // 查询变量的值将用它转换
    serialize: value =&gt; new Date(value).toISOString(),   // 确保返回值有统一的格式

    parseLiteral: ast =&gt; ast.value // 查询字面量最先被解析为AST时，可以转换它的值，如果需要
}
</code></pre>
<h2 id="查询">查询</h2>
<ol>
<li>定义查询</li>
</ol>
<pre><code class="language-GraphQL">type Query {
    allUsers: [User!]!
}
</code></pre>
<ol start="2">
<li>使用查询</li>
</ol>
<pre><code class="language-GraphQL">query allUsers {
​	aliasName: name
​	friends(genderParam: FEMALE) {
​		name
​		gender
​	}

​	...on work {
​		position
​		office
​	},	

​	...on study {
​		grade
​		school
​	}
}
</code></pre>
<h3 id="片段-fragment">片段 fragment</h3>
<blockquote>
<p>避免查询中重复声明</p>
</blockquote>
<pre><code class="language-GraphQL">fragment userInfo on User {
​	name
    gender
}
</code></pre>
<h3 id="订阅-subscription">订阅 subscription</h3>
<ol>
<li>定义订阅</li>
</ol>
<pre><code class="language-GraphQL">type Subscription {
    newUser: User!
}
</code></pre>
<ol start="2">
<li>使用订阅</li>
</ol>
<pre><code class="language-GraphQL">subscription {
    newUser {
        id
        name
    }
}
</code></pre>
<h3 id="变更-mutation">变更 mutation</h3>
<ol>
<li>定义变更</li>
</ol>
<pre><code class="language-GraphQL">type Mutation  {
    postUser(name: String): User!
}
</code></pre>
<ol start="2">
<li>使用变更</li>
</ol>
<pre><code class="language-GraphQL">mutation newUser($name: String) {
    postUser(name: $name) {
        id
        name
        createdAt
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequelize 关系映射]]></title>
        <id>http://zhongxingdou.github.io/blog/post/sequelize-guan-xi-ying-she/</id>
        <link href="http://zhongxingdou.github.io/blog/post/sequelize-guan-xi-ying-she/">
        </link>
        <updated>2020-05-06T04:54:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="belongsto">belongsTo</h2>
<pre><code class="language-js"> models.Page.belongsTo(models.User, {
    as: 'createUser',
    foreignKey: 'creator',
});

models.Page.belongsTo(models.User, {
    as: 'operateUser',
    foreignKey: 'operator'
});

models.Page.findOne({
    where: {id: 1}, 
    include: 'createUser'
}).then(p =&gt; console.log(p.createUser.name))

 models.Page.findOne({where: {id: 1}, include: 'createUser'}).then(p =&gt; console.log(p.toJSON()))

 { seo: null,
  style: null,
  props: null,
  id: 1,
  title: 'test1',
  description: 'test1 desc',
  creator: 1,
  operator: null,
  createdAt: 2020-04-30T11:50:14.586Z,
  updatedAt: 2020-04-30T11:50:14.586Z,
  createUser:
   { id: 1,
     name: 'liuxing',
     email: 'zhongxingdou@gmail.com',
     password:
      '14ff096758d8b24276d9ed28088fbf9ff963c5109e7150118f3b6243a1b54874',
     createdAt: 2020-04-27T02:44:49.848Z,
     updatedAt: 2020-04-27T02:44:49.848Z } }

models.Page.findAll({include: 'createUser'})
.then(ps =&gt; console.log(ps[0].createUser.name))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[代码在干什么？]]></title>
        <id>http://zhongxingdou.github.io/blog/post/what-code-do/</id>
        <link href="http://zhongxingdou.github.io/blog/post/what-code-do/">
        </link>
        <updated>2020-04-16T03:32:05.000Z</updated>
        <content type="html"><![CDATA[<p>代码有长有短，<br>
如 windows 源码，<br>
长到这辈子可能都看不完。<br>
如 print(“hello world”)，<br>
短到一行也可以运行。<br>
或长或短，<br>
总归是写出来有用的，<br>
那代码到底都干了啥呢？</p>
<p>经某人总结，<br>
代码干了一件事：<br>
“找出东西来用”。<br>
这挺好理解，<br>
上街得坐车。<br>
做饭得用锅，<br>
但是，它并不简单。</p>
<p>做饭得放米，<br>
米在米缸里，<br>
放米得看几张口，<br>
先量再洗，<br>
洗完按比例加水，<br>
加少了磕牙，加多了会糊，<br>
最后记得插电按开始。</p>
<p>这一切都可以是数据，<br>
米是1，缸是2，锅是3，水是4，<br>
放米a，洗米b，加水c，插电d，按钮e，<br>
其实呢，一切变化都是数据变化，<br>
电流要跑多少回，水要蒸腾几朵云，<br>
才能把生米给做成了熟饭。</p>
<p>因此，“找出东西来用” ——<br>
编码数据，<br>
取出数据，<br>
计算数据，<br>
写入数据。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工作太久带来的问题]]></title>
        <id>http://zhongxingdou.github.io/blog/post/working-too-long/</id>
        <link href="http://zhongxingdou.github.io/blog/post/working-too-long/">
        </link>
        <updated>2020-04-11T10:45:59.000Z</updated>
        <summary type="html"><![CDATA[<p>毕业已经是19年前的事了<br>
做程序也已经有13年了<br>
不知不觉人生已经走过了三分之一（可能还要多😭）<br>
心里还不觉得，可人家已经叫你叔了</p>
]]></summary>
        <content type="html"><![CDATA[<p>毕业已经是19年前的事了<br>
做程序也已经有13年了<br>
不知不觉人生已经走过了三分之一（可能还要多😭）<br>
心里还不觉得，可人家已经叫你叔了</p>
<!-- more -->
<p>青春不见了<br>
曾经爱过的姑娘不见了<br>
老家的土房子也不见了<br>
普希金说过：过去的东西总是显得珍贵</p>
<p>18岁时在大街上找工作时的迷茫感觉<br>
似乎还没有完全散干净<br>
浑浑噩噩的过了这么些年<br>
人生的航灯，它似乎也没有更明朗一些</p>
<p>这些年哪，似乎只有工作<br>
我就像那上了发条的钟<br>
按部就班，嘀嗒嘀嗒<br>
毫无生趣，毫无人性</p>
<p>如果有一天，老板它不上钟<br>
可能我就要停了<br>
那个时候，我还能不能正常的<br>
吃喝拉撒，呼吸空气</p>
<p>天哪，太可怕了<br>
我卖了我的自由<br>
换来了如此的人生<br>
如此的人生</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[火龙果H5开发平台开发日志]]></title>
        <id>http://zhongxingdou.github.io/blog/post/huolongguo-h5-dev-log/</id>
        <link href="http://zhongxingdou.github.io/blog/post/huolongguo-h5-dev-log/">
        </link>
        <updated>2020-04-11T10:28:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="2020-5-18-~-2020-5-20">2020-5-18 ~ 2020-5-20</h2>
<ol>
<li>迁移更多类型声明往 type.ts</li>
<li>实现 util.catchPromise，相关类型声明费了不少时间</li>
<li>实现用户列表页</li>
<li>实现团队成员列表页</li>
</ol>
<h2 id="2020-5-14-~-2020-5-15">2020-5-14 ~ 2020-5-15</h2>
<ol>
<li>实现团队（Organization）</li>
<li>实现通用布局组件 ListLayout</li>
<li>登陆优化：支持在密码输入框按“enter”键登陆</li>
</ol>
<h2 id="2020-5-12-~-2020-5-13">2020-5-12 ~ 2020-5-13</h2>
<ol>
<li>使用 Vue compostion API 和模板语言 pug 重构组件管理</li>
<li>抽取出公共 Vue hooks：列表页搜索、翻页与刷新逻辑，支持新建与编辑的表单对话框逻辑</li>
</ol>
<h2 id="2020-5-11">2020-5-11</h2>
<ol>
<li>完成组件管理：包括组件编辑、删除、组件版本新建、删除、修改，以及组件版本在表单页的切换</li>
</ol>
<h2 id="2020-5-9">2020-5-9</h2>
<ol>
<li>完善组件分类</li>
<li>新增组件，组件列表 80%</li>
</ol>
<h2 id="2020-5-8">2020-5-8</h2>
<ol>
<li>service 实现上传与下载文件</li>
<li>实现组件分类管理</li>
</ol>
<h2 id="2020-5-6">2020-5-6</h2>
<ol>
<li>Page 列表页实现编辑与删除，添加创建者列</li>
<li>添加 Element 对 Vue 的扩展的 TypeScript 类型声明</li>
<li>学习 TypeScript 范型相关，为了声明对现存库的扩展</li>
<li>学习 Sequelize belongsTo 关联以及关联后的查询输出</li>
</ol>
<h2 id="2020-4-30">2020-4-30</h2>
<ol>
<li>实现了 Page 列表页</li>
<li>统一包装 service 返回结果</li>
<li>开始在 TechSEA 上班</li>
</ol>
<h2 id="2020-4-29">2020-4-29</h2>
<p>联系了上海前同事，进行了全面介绍，答应后续帮助推广，并赞同方向</p>
<h2 id="2020-4-27">2020-4-27</h2>
<p>支持本地 sqlite3 数据库与本地 nodejs 服务，docker 服务太费笔记本电池</p>
<h2 id="2020-4-24">2020-4-24</h2>
<ol>
<li>实现 PageService</li>
<li>实现 ComponentService</li>
</ol>
<h2 id="2020-4-22">2020-4-22</h2>
<p>实现自动生成 VueRouter 路由</p>
<h2 id="2020-4-20">2020-4-20</h2>
<p>加了后台菜单</p>
<h2 id="2020-4-17">2020-4-17</h2>
<p>实现注册界面</p>
<h2 id="2020-4-12">2020-4-12</h2>
<p>实现登陆界面</p>
<h2 id="2020-4-7">2020-4-7</h2>
<p>实现用户验证服务</p>
<ul>
<li>json-web-token, jsonwebsocket</li>
<li>koa-session</li>
</ul>
<h2 id="2020-3-22">2020-3-22</h2>
<p>开发环境搭建</p>
<ul>
<li>Koa 2</li>
<li>Mysql, Sequelize</li>
<li>Vuejs, Vue CLI</li>
</ul>
]]></content>
    </entry>
</feed>